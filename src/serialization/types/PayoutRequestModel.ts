/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as ButtonclikrApi from "../../api/index";
import * as core from "../../core";
import { PayoutRequestModelCurrency } from "./PayoutRequestModelCurrency";
import { PayoutRequestModelUm } from "./PayoutRequestModelUm";
import { Inactive } from "./Inactive";
import { Frozen } from "./Frozen";

export const PayoutRequestModel: core.serialization.ObjectSchema<
    serializers.PayoutRequestModel.Raw,
    ButtonclikrApi.PayoutRequestModel
> = core.serialization.object({
    login: core.serialization.string(),
    entity: core.serialization.string(),
    billing: core.serialization.string().optional(),
    account: core.serialization.string(),
    payoutFlow: core.serialization.string().optional(),
    name: core.serialization.string().optional(),
    description: core.serialization.string().optional(),
    secondaryDescriptor: core.serialization.string().optional(),
    schedule: core.serialization.number(),
    scheduleFactor: core.serialization.number(),
    start: core.serialization.number(),
    currency: PayoutRequestModelCurrency.optional(),
    um: PayoutRequestModelUm,
    amount: core.serialization.number(),
    minimum: core.serialization.number().optional(),
    maximum: core.serialization.number().optional(),
    float: core.serialization.number(),
    skipOffDays: core.serialization.number(),
    sameDay: core.serialization.number(),
    inactive: Inactive,
    frozen: Frozen,
});

export declare namespace PayoutRequestModel {
    interface Raw {
        login: string;
        entity: string;
        billing?: string | null;
        account: string;
        payoutFlow?: string | null;
        name?: string | null;
        description?: string | null;
        secondaryDescriptor?: string | null;
        schedule: number;
        scheduleFactor: number;
        start: number;
        currency?: PayoutRequestModelCurrency.Raw | null;
        um: PayoutRequestModelUm.Raw;
        amount: number;
        minimum?: number | null;
        maximum?: number | null;
        float: number;
        skipOffDays: number;
        sameDay: number;
        inactive: Inactive.Raw;
        frozen: Frozen.Raw;
    }
}
