/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as ButtonclikrApi from "../../../../../api/index";
import * as core from "../../../../../core";
import { PutDecisionsIdRequestApplication } from "../../types/PutDecisionsIdRequestApplication";
import { PutDecisionsIdRequestType } from "../../types/PutDecisionsIdRequestType";
import { PutDecisionsIdRequestTarget } from "../../types/PutDecisionsIdRequestTarget";
import { PutDecisionsIdRequestAction } from "../../types/PutDecisionsIdRequestAction";
import { PutDecisionsIdRequestValue } from "../../types/PutDecisionsIdRequestValue";
import { PutDecisionsIdRequestPeriod } from "../../types/PutDecisionsIdRequestPeriod";
import { PutDecisionsIdRequestUseCache } from "../../types/PutDecisionsIdRequestUseCache";
import { PutDecisionsIdRequestInactive } from "../../types/PutDecisionsIdRequestInactive";
import { PutDecisionsIdRequestFrozen } from "../../types/PutDecisionsIdRequestFrozen";

export const PutDecisionsIdRequest: core.serialization.Schema<
    serializers.PutDecisionsIdRequest.Raw,
    ButtonclikrApi.PutDecisionsIdRequest
> = core.serialization.object({
    login: core.serialization.unknown(),
    org: core.serialization.unknown().optional(),
    entity: core.serialization.unknown().optional(),
    decision: core.serialization.unknown().optional(),
    division: core.serialization.unknown().optional(),
    partition: core.serialization.unknown().optional(),
    application: PutDecisionsIdRequestApplication,
    level: core.serialization.unknown(),
    type: PutDecisionsIdRequestType,
    target: PutDecisionsIdRequestTarget,
    action: PutDecisionsIdRequestAction,
    sequence: core.serialization.unknown().optional(),
    amount: core.serialization.unknown().optional(),
    value: PutDecisionsIdRequestValue,
    period: PutDecisionsIdRequestPeriod,
    periodFactor: core.serialization.unknown(),
    schedule: core.serialization.unknown().optional(),
    scheduleFactor: core.serialization.unknown(),
    start: core.serialization.unknown(),
    finish: core.serialization.unknown().optional(),
    low: core.serialization.unknown(),
    high: core.serialization.unknown().optional(),
    useCache: PutDecisionsIdRequestUseCache,
    cacheTime: core.serialization.unknown().optional(),
    options: core.serialization.unknown().optional(),
    additionalOptions: core.serialization.unknown().optional(),
    errorMessage: core.serialization.unknown().optional(),
    reason: core.serialization.unknown().optional(),
    inactive: PutDecisionsIdRequestInactive,
    frozen: PutDecisionsIdRequestFrozen,
});

export declare namespace PutDecisionsIdRequest {
    interface Raw {
        login?: unknown;
        org?: unknown | null;
        entity?: unknown | null;
        decision?: unknown | null;
        division?: unknown | null;
        partition?: unknown | null;
        application: PutDecisionsIdRequestApplication.Raw;
        level?: unknown;
        type: PutDecisionsIdRequestType.Raw;
        target: PutDecisionsIdRequestTarget.Raw;
        action: PutDecisionsIdRequestAction.Raw;
        sequence?: unknown | null;
        amount?: unknown | null;
        value: PutDecisionsIdRequestValue.Raw;
        period: PutDecisionsIdRequestPeriod.Raw;
        periodFactor?: unknown;
        schedule?: unknown | null;
        scheduleFactor?: unknown;
        start?: unknown;
        finish?: unknown | null;
        low?: unknown;
        high?: unknown | null;
        useCache: PutDecisionsIdRequestUseCache.Raw;
        cacheTime?: unknown | null;
        options?: unknown | null;
        additionalOptions?: unknown | null;
        errorMessage?: unknown | null;
        reason?: unknown | null;
        inactive: PutDecisionsIdRequestInactive.Raw;
        frozen: PutDecisionsIdRequestFrozen.Raw;
    }
}
