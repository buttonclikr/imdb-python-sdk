/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as ButtonclikrApi from "../index";

export interface TxnsModel {
    id?: ButtonclikrApi.Id;
    created?: ButtonclikrApi.Created;
    modified?: ButtonclikrApi.Modified;
    creator?: ButtonclikrApi.Creator;
    modifier?: ButtonclikrApi.Modifier;
    /** The incoming ip address from which this Transaction was created. */
    ipCreated?: string;
    /** The incoming ip address from which this Transaction was last modified. */
    ipModified?: string;
    /** The identifier of the Merchant associated with this Transaction. */
    merchant?: string;
    /** The token of the Tokens resource this Transaction is associated with. */
    token?: string;
    /** The payment method associated with this Transaction, including the card details. */
    payment?: string;
    /**
     * If this Transaction is related to another Transaction, then this field is set to the identifier of the other Transaction.
     * For example, if this Transaction is a refund, this field could be set to the identifier of the original sale Transaction.
     */
    fortxn?: string;
    /** Reauthorize this referenced Transaction. For example, to process a resubmission of a declined Transaction or to reauthorize an expired Transaction. */
    fromtxn?: string;
    /** If the Transaction is linked to a Batch, this field specifies the identifier of the Batch. */
    batch?: string;
    /** The identifier of the Subscription associated with this Transaction. */
    subscription?: string;
    /** The statement ID for which this transaction is being processed as payment. */
    statement?: string;
    /**
     * The type of Transaction.
     *
     * <details> <summary>Valid Values</summary>
     *
     * - `1` - **Credit Card Only: Sale Transaction.** Processes a sale and charges the customer.
     *
     * - `2` - **Credit Card Only: Auth Transaction.** Authorizes and holds the requested total on the credit card.
     *
     * - `3` - **Credit Card Only: Capture Transaction.** Finalizes a prior Auth Transaction and charges the customer.
     *
     * - `4` - **Credit Card Only: Reverse Authorization.** Reverses a prior Auth or Sale Transaction and releases the credit hold.
     *
     * - `5` - **Credit Card Only: Refund Transaction.** Refunds a prior Capture or Sale Transaction (total may be specified for a partial refund).
     *
     * - `7` - **Echeck Only: Echeck Sale Transaction.** Sale Transaction for ECheck payment.
     *
     * - `8` - **Echeck Only: Echeck Refund Transaction.** Refund Transaction for prior ECheck Sale Transaction.
     *
     * - `11` - **Echeck Only: Echeck Redeposit Transaction.** Attempt to redeposit a prior failed eCheck Sale Transaction.
     *
     * - `12` - **Echeck Only: Echeck Account Verification Transaction.** Attempt to verify eCheck payment details.
     *
     *  </details>
     */
    type?: ButtonclikrApi.TxnsModelType;
    /**
     * The expiration date of this Transaction.
     * This field is stored as a text string in 'MMYY' format, where 'MM' is the number of a month and 'YY' is the last two digits of a year. For example, '0623' for June 2023.
     * The value must reflect a future date.
     */
    expiration?: string;
    /** The service code retrieved from the track data for a credit card swiped transaction. */
    serviceCode?: string;
    /**
     * A date indicating when this Transaction was funded.
     * This field is set automatically.
     */
    funded?: number;
    /** The transaction has been returned by the receiver. */
    returned?: string;
    currency?: ButtonclikrApi.TerminalTxnsCurrencyProperty;
    /**
     * "A list of currency codes!
     *
     * To combine these two sentences, I'll assume you want to create a new sentence that combines the currencies with their corresponding country names. Here's an attempt:
     *
     * "Papua New Guinean kina (PGK) is equivalent to Philippine piso (PHP), while Pakistani rupee (PKR) is similar to Polish złoty (PLN). Meanwhile, Paraguayan guaraní (PYG) is comparable to Qatari riyal (QAR), and Romanian leu (RON) is akin to Serbian dinar (RSD). Russian ruble (RUB) is equivalent to Rwandan franc (RWF), while Saudi riyal (SAR) is similar to Solomon Islands dollar (SBD). Seychelles rupee (SCR) is comparable to Sudanese pound (SDG), and Swedish krona/kronor (SEK) is akin to Singapore dollar (SGD). Saint Helena pound (SHP) is equivalent to Sierra Leonean leone (SLL), while Somali shilling (SOS) is similar to Surinamese dollar (SRD). South Sudanese pound (SSP) is comparable to São Tomé and Príncipe dobra (STN), and Salvadoran colón (SVC) is akin to Syrian pound (SYP). Swazi lilangeni (SZL) is equivalent to Thai baht (THB), while Tajikistani somoni (TJS) is similar to Turkmenistan manat (TMT). Tunisian dinar (TND) is comparable to Tongan pa'anga (TOP), and Turkish lira (TRY) is akin to Trinidad and Tobago dollar (TTD). New Taiwan dollar (TWD) is equivalent to Tanzanian shilling (TZS), while Ukrainian hryvnia (UAH) is similar to Ugandan shilling (UGX). United States dollar (USD) is comparable to Uruguayan peso (UYU), and Uzbekistan som (UZS) is akin to Venezuelan bolívar (VEF). Vietnamese đồng (VND) is equivalent to Vanuatu vatu (VUV), while Samoan tala (WST) is similar to CFA franc BEAC (XAF). Silver (XAG) is comparable to Gold (XAU), and European Composite Unit (XBA) is akin to European Monetary Unit (XBB). European Unit of Account (XBC) is equivalent to East Caribbean dollar (XCD), while Special drawing rights (XDR) is similar to CFA franc BCEAO (XOF). Palladium (XPD) is comparable to Platinum (XPT), and SUCRE (XSU) is akin to ADB Unit of Account (XUA). Yemeni rial (YER) is equivalent to South African rand (ZAR), while Zambian kwacha (ZMW) is similar to Zimbabwean dollar (ZWL)."
     */
    fundingCurrency?: ButtonclikrApi.TxnsModelFundingCurrency;
    /**
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `customerAccepted` - **The customer accepted the currency conversion rate**
     *
     * - `customerRejected` - **The customer rejected the currency conversion rate**
     *
     * - `notEligible` - **This transaction is not eligible for currency conversion**
     *
     * </details>
     */
    currencyConversion?: ButtonclikrApi.TxnsModelCurrencyConversion;
    /** An integer-boolean indicating whether or not the fee should be processed as a convenience fee. */
    convenienceFee?: number;
    /**
     * Optional calculated fee amount indicator. This should be used in conjunction with txnFee setting on Fees resource.
     * This field is specified as an integer in cents.
     */
    fee?: number;
    /**
     * When fee is set, this will track the amount of the fee that has been consumed.
     * This field is specified as an integer in cents.
     */
    feeConsumed?: number;
    /** The platform used to process this Transaction. */
    platform?: ButtonclikrApi.TxnsModelPlatform;
    /**
     * The date on which the Transaction was authorized.
     * The date is specified as an eight digit string in YYYYMMDD format, for example, '20160120' for January 20, 2016.
     * The value of this field must represent a date in the past.
     */
    authDate?: number;
    /**
     * The authorization code for this Transaction.
     * This field is stored as a text string and must be between 0 and 20 characters long.
     */
    authCode?: string;
    /**
     * A timestamp indicating when this Transaction was captured.
     * This field is set automatically.
     */
    captured?: Date;
    /**
     * A date indicating when this Transaction was settled.
     * This field is set automatically.
     */
    settled?: string;
    /**
     * The currency of the settled total.
     * This field is set automatically.
     */
    settledCurrency?: ButtonclikrApi.TxnsModelSettledCurrency;
    /**
     * The total amount that was settled.
     * This field is specified as an integer in cents and is set automatically.
     */
    settledTotal?: number;
    /**
     * Whether to allow partial amount authorizations of this Transaction, For example, if the transaction amount is $1000 and the processor only authorizes a smaller amount, then enabling this field lets the Transaction proceed anyway. <details> <summary>Valid Values</summary>
     *
     * - `0` - **Partial amount authorizations are not allowed.**
     *
     * - `1` - **Partial amount authorizations are allowed**
     *
     *  </details>
     */
    allowPartial?: number;
    /**
     * The identifier of the Order associated with this Transaction.
     * This field is stored as a text string and must be between 0 and 1000 characters long.
     */
    order?: string;
    /**
     * A description of this Transaction.
     * This field is stored as a text string and must be between 0 and 1000 characters long.
     */
    description?: string;
    /**
     * The descriptor used in this Transaction.
     * This field is stored as a text string and must be between 1 and 50 characters long. If a value is not set, an attempt is made to set a default value from the merchant information.
     */
    descriptor?: string;
    /** Sequencial number that uniquely identifies the txn. */
    traceNumber?: number;
    /** The discount applied to the transaction. */
    discount?: number;
    /** The shipping fee pertaining to this transaction. */
    shipping?: number;
    /** The duty fee applicable to this transaction. */
    duty?: number;
    /**
     * The identifier of the terminal that processed this Transaction.
     * The identifier is taken from the terminal system and varies in format according to the type of terminal.
     * This field is stored as a text string and must be between 0 and 50 characters long.
     */
    terminal?: string;
    /**
     * Capabilities of the terminal device capabilities of the terminal device.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `1` - **Key entry only terminal.**
     *
     * - `2` - **Can read magnetic stripe.**
     *
     * - `3` - **Integrated circuit reader.**
     *
     * </details>
     */
    terminalCapability?: number;
    entryMode?: ButtonclikrApi.TerminalTxnsEntryModeProperty;
    /**
     * The origin of the transaction.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `1` - **Originated at a credit card terminal.**
     *
     * - `2` - **Originated through an eCommerce system.**
     *
     * - `3` - **Originated as a mail order or telephone order transaction.**
     *
     * - `4` - **Originated with Apple Pay.**
     *
     * - `5` - **Originated as a Successful 3D Secure transaction.**
     *
     * - `6` - **Originated as an Attempted 3D Secure transaction.**
     *
     * - `7` - **Originated as a recurring transaction on the card.**
     *
     * - `8` - **Originated in a PayFrame.**
     *
     *  </details>
     */
    origin?: number;
    /**
     * Indicates if a transaction is being processed through a Mobile POS
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **Non-mobile POS**
     *
     * - `1` - **Mobile POS**
     *
     * </details>
     */
    mobile?: number;
    /**
     * The amount of the total sum of this Transaction that is made up of tax.
     * This field is specified as an integer in cents.
     */
    tax?: number;
    /**
     * The amount of the total sum of this Transaction that is made up of surcharge.
     * This field is specified as an integer in cents.
     */
    surcharge?: number;
    /**
     * The total amount of this Transaction.
     * This field is specified as an integer in cents.
     */
    total?: number;
    /**
     * The amount of the total sum of this Transaction that is given as cash back.
     * This field is specified as an integer in cents.
     */
    cashback?: number;
    /** The authorization code for this Transaction, as returned by the network. */
    authorization?: string;
    /** The amount, in 'cents', of funds originally authorized for the transaction. */
    originalApproved?: number;
    /**
     * The total amount that was approved for this Transaction by the processor.
     * This field is specified as an integer in cents.
     */
    approved?: number;
    /** Authentication token returned by the network in a 3DSecure txn. */
    authentication?: string;
    /** Optional transaction ID returned by the network in a 3DSecure txn. */
    authenticationId?: string;
    /** Whether correct cvv was sent during this Transaction. */
    cvv?: number;
    /**
     * The status of the CVV on the card.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `notPresent` - **CVV is not present.**
     *
     * - `illegible` - **CVV is illegible.**
     *
     * - `notProvided` - **CVV was not provided.**
     * </details>
     */
    cvvStatus?: ButtonclikrApi.TxnsModelCvvStatus;
    /** Whether the card was swiped during this Transaction. This field is set to '1' automatically if 'track' data was received, and can have valid values of `0` (**Not swiped**) or `1` (**Swiped**). */
    swiped?: number;
    /** Whether the card was dipped (using the EMV chip) during this transaction. */
    emv?: number;
    /** Whether a signature was captured during this Transaction. You can set this field if you took a signature for the Transaction. The API also sets this field automatically if you associate a signature to the Transaction by creating a 'txnDatas' resource. <details> <summary>Valid Values</summary> - `0` - **Not captured** - `1` - **Captured** </details> */
    signature?: number;
    /** Whether this Transaction was verified with a PIN or not. */
    pin?: number;
    /**
     * Indicates the PIN entry capability of the device, which can be unknown, capable, notCapable, or pinPadDown.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `unknown` - **Unknown PIN Entry Capability.**
     * - `capable` - **Terminal can accept PINs.**
     * - `notCapable` - **Terminal cannot accept entry of PINs.**
     * - `pinPadDown` - **Terminal PIN Pad is down.**
     *
     * </details>
     */
    pinEntryCapability?: ButtonclikrApi.TxnsModelPinEntryCapability;
    /** Whether the card was swiped at an unattended terminal during this Transaction, This field is set to '0' by default. */
    unattended?: number;
    /**
     * The type of Card On File transaction when using a token is single, scheduled, or unscheduled.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `single` - **Individual Transaction.**
     * - `scheduled` - **Scheduled Transaction.**
     * - `unscheduled` - **Unscheduled sequential Transaction.**
     * </details>
     */
    cofType?: ButtonclikrApi.TxnsModelCofType;
    /** Reason for copying Transaction referenced in fromtxn field, which can be either resubmission or reauthorization. */
    copyReason?: ButtonclikrApi.TxnsModelCopyReason;
    /**
     * The client ip address from which the Transaction was created.
     * Valid values are any Ipv4 or Ipv6 address.
     */
    clientIp?: string;
    /** The first name associated with this Transaction. For eCheck transactions, either first or last is required. */
    first?: string;
    /** The middle name associated with this Transaction. */
    middle?: string;
    /** The last name associated with this Transaction. For eCheck transactions, either first or last is required. */
    last?: string;
    /**
     * The name of the company associated with this Transaction.
     * Setting this field is especially important when processing an eCheck from a company.
     */
    company?: string;
    /** The email associated with this Transaction. */
    email?: string;
    /**
     * The first line of the address associated with this Transaction.
     * This field is stored as a text string and must be between 1 and 500 characters long.
     */
    address1?: string;
    /**
     * The second line of the address associated with this Transaction.
     * This field is stored as a text string and must be between 1 and 500 characters long.
     */
    address2?: string;
    /**
     * The name of the city in the address associated with this Transaction.
     * This field is stored as a text string and must be between 1 and 500 characters long.
     */
    city?: string;
    /**
     * The state associated with this Transaction.
     * If in the U.S. this is specified as the 2 character postal abbreviation for the state, if outside of the U.S. the full state name.
     * This field is stored as a text string and must be between 2 and 100 characters long.
     */
    state?: ButtonclikrApi.TxnsModelState;
    /**
     * The ZIP code in the address associated with this Transaction.
     * This field is stored as a text string and must be between 1 and 20 characters long.
     */
    zip?: string;
    country?: ButtonclikrApi.TerminalTxnsCountryProperty;
    /**
     * The phone number associated with this Transaction.
     * This field is stored as a text string and must be between 10 and 15 characters long.
     */
    phone?: string;
    /**
     * The Merchant ID as set by the processor.
     * This field is stored as a text string and must be between 0 and 50 characters long.
     */
    mid?: string;
    /**
     * The status of the Transaction.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **Pending**
     *
     * - `1` - **Approved**
     *
     * - `2` - **Failed**
     *
     * - `3` - **Captured**
     *
     * - `4` - **Settled**
     *
     * - `5` - **Returned**
     *
     *   </details>
     * .
     */
    status?: number;
    /** The amount of this Transaction that has been refunded. */
    refunded?: number;
    /** Indicates whether the Transaction is reserved and the action that will be taken as a result, with valid values including No reserve, Transaction processing withheld, Transaction capture withheld pending manual review, Move all funds from this Transaction into a reserve, TBD, TBD, TBD, and TBD. */
    reserved?: number;
    /** Indicates if an authorization has been misused by not being captured or reversed within the timeframe, which varies per network, mcc and type of txn closing (capture/reverse auth), with valid values indicating whether it's Not misused (0) or Misused (1). */
    misused?: number;
    /** The last transaction stage check for risk. */
    checkStage?: ButtonclikrApi.TxnsModelCheckStage;
    /**
     * The reason for the auth reversal is set to 'customerCancelled' by default, and this field can take on one of the following valid values:
     *
     * <details><summary>Valid Values</summary>
     *
     * - `incomplete` - **Transaction Incomplete.**
     *
     * - `timeout` - **Transaction Timeout.**
     *
     * - `clerkCancelled` - **Transaction Cancelled by Clerk.**
     *
     * - `customerCancelled` - **Transaction Cancelled by Customer.**
     *
     * - `misdispense` - **Misdispense.**
     *
     * - `hardwareFailure` - **Hardware Failure.**
     *
     * - `suspectedFraud` - **Suspected Fraud.**
     *
     *   </details>
     */
    unauthReason?: ButtonclikrApi.TxnsModelUnauthReason;
    /** The customer identifier from the AuthToken used during authentication. */
    authTokenCustomer?: string;
    /** This field is stored as a text string and must be between 0 and 1000 characters long. */
    channel?: string;
    /**
     * Whether the txn was imported from a report or not, this field is set automatically whether the txn was imported from a report or not. This field is set automatically.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **Not Imported**
     * - `1` - **Imported**
     * </details>
     */
    imported?: number;
    /** For entry creation and deletion job sequencing: the current request sequence number for this transaction. */
    requestSequence?: number;
    /** For entry creation and deletion job sequencing: the current processed sequence number for this transaction. */
    processedSequence?: number;
    inactive?: ButtonclikrApi.Inactive;
    frozen?: ButtonclikrApi.Frozen;
    /** If this transaction is for debt repayment or not for debt repayment. */
    debtRepayment?: number;
    /** Whether or not funding is enabled for this Txn. */
    fundingEnabled?: number;
    /** FBO in which each entry origin belongs to. */
    fbo?: string;
    txnsession?: string;
}
