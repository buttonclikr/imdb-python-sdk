/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ButtonclikrApi from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Watchlists {
    interface Options {
        environment?: core.Supplier<environments.ButtonclikrApiEnvironment | string>;
        apiKey: core.Supplier<string>;
        /** Override the search header */
        search?: core.Supplier<string | undefined>;
        /** Override the SESSIONKEY header */
        sessionkey: core.Supplier<string>;
        /** Override the TXNSESSIONKEY header */
        txnsessionkey: core.Supplier<string>;
        /** Override the USERNAME header */
        username: core.Supplier<string>;
        /** Override the PASSWORD header */
        password: core.Supplier<string>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the search header */
        search?: string | undefined;
        /** Override the SESSIONKEY header */
        sessionkey?: string;
        /** Override the TXNSESSIONKEY header */
        txnsessionkey?: string;
        /** Override the USERNAME header */
        username?: string;
        /** Override the PASSWORD header */
        password?: string;
    }
}

export class Watchlists {
    constructor(protected readonly _options: Watchlists.Options) {}

    /**
     * Query a WatchlistItem. A WatchlistItem is a set of attributes of a person or entity of interest.
     *
     * @param {unknown} id - The ID of this resource.
     * @param {ButtonclikrApi.GetWatchlistItemsIdRequest} request
     * @param {Watchlists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.watchlists.getWatchlistItemsId({
     *         "key": "value"
     *     }, {
     *         expand: "string",
     *         unmask: "string"
     *     })
     */
    public async getWatchlistItemsId(
        id: unknown,
        request: ButtonclikrApi.GetWatchlistItemsIdRequest,
        requestOptions?: Watchlists.RequestOptions
    ): Promise<ButtonclikrApi.GetWatchlistItemsIdResponse> {
        const { expand, unmask } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        _queryParams["expand"] = expand;
        _queryParams["unmask"] = unmask;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ButtonclikrApiEnvironment.Default,
                `watchlistItems/${encodeURIComponent(id)}`
            ),
            method: "GET",
            headers: {
                search:
                    (await core.Supplier.get(this._options.search)) != null
                        ? await core.Supplier.get(this._options.search)
                        : undefined,
                SESSIONKEY: await core.Supplier.get(this._options.sessionkey),
                TXNSESSIONKEY: await core.Supplier.get(this._options.txnsessionkey),
                USERNAME: await core.Supplier.get(this._options.username),
                PASSWORD: await core.Supplier.get(this._options.password),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@imdb/sdk-9754",
                "X-Fern-SDK-Version": "0.0.8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.GetWatchlistItemsIdResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ButtonclikrApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ButtonclikrApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ButtonclikrApiTimeoutError();
            case "unknown":
                throw new errors.ButtonclikrApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Update a WatchlistItem. A WatchlistItem is a set of attributes of a person or entity of interest.
     *
     * @param {unknown} id - The ID of this resource.
     * @param {ButtonclikrApi.PutWatchlistItemsIdRequest} request
     * @param {Watchlists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.watchlists.putWatchlistItemsId({
     *         "key": "value"
     *     }, {
     *         watchlist: {
     *             "key": "value"
     *         },
     *         type: ButtonclikrApi.PutWatchlistItemsIdRequestType.Entity,
     *         name: {
     *             "key": "value"
     *         },
     *         title: {
     *             "key": "value"
     *         },
     *         first: {
     *             "key": "value"
     *         },
     *         middle: {
     *             "key": "value"
     *         },
     *         last: {
     *             "key": "value"
     *         },
     *         ein: {
     *             "key": "value"
     *         },
     *         ssn: {
     *             "key": "value"
     *         },
     *         dob: {
     *             "key": "value"
     *         },
     *         dl: {
     *             "key": "value"
     *         },
     *         dlstate: "string",
     *         email: {
     *             "key": "value"
     *         },
     *         website: {
     *             "key": "value"
     *         },
     *         ipAddress: {
     *             "key": "value"
     *         },
     *         payment: {
     *             method: ButtonclikrApi.PutWatchlistItemsIdRequestPaymentMethod.One,
     *             number: {
     *                 "key": "value"
     *             },
     *             routing: {
     *                 "key": "value"
     *             }
     *         },
     *         bin: {
     *             "key": "value"
     *         },
     *         last4: {
     *             "key": "value"
     *         },
     *         keyword: {
     *             "key": "value"
     *         },
     *         ref: {
     *             "key": "value"
     *         },
     *         custom: {
     *             "key": "value"
     *         },
     *         notes: {
     *             "key": "value"
     *         },
     *         address1: {
     *             "key": "value"
     *         },
     *         address2: {
     *             "key": "value"
     *         },
     *         city: {
     *             "key": "value"
     *         },
     *         state: "string",
     *         zip: {
     *             "key": "value"
     *         },
     *         country: ButtonclikrApi.PutWatchlistItemsIdRequestCountry.Abw,
     *         phone: {
     *             "key": "value"
     *         },
     *         fax: {
     *             "key": "value"
     *         },
     *         inactive: ButtonclikrApi.PutWatchlistItemsIdRequestInactive.Zero,
     *         frozen: ButtonclikrApi.PutWatchlistItemsIdRequestFrozen.Zero
     *     })
     */
    public async putWatchlistItemsId(
        id: unknown,
        request: ButtonclikrApi.PutWatchlistItemsIdRequest,
        requestOptions?: Watchlists.RequestOptions
    ): Promise<ButtonclikrApi.PutWatchlistItemsIdResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ButtonclikrApiEnvironment.Default,
                `watchlistItems/${encodeURIComponent(id)}`
            ),
            method: "PUT",
            headers: {
                search:
                    (await core.Supplier.get(this._options.search)) != null
                        ? await core.Supplier.get(this._options.search)
                        : undefined,
                SESSIONKEY: await core.Supplier.get(this._options.sessionkey),
                TXNSESSIONKEY: await core.Supplier.get(this._options.txnsessionkey),
                USERNAME: await core.Supplier.get(this._options.username),
                PASSWORD: await core.Supplier.get(this._options.password),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@imdb/sdk-9754",
                "X-Fern-SDK-Version": "0.0.8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.PutWatchlistItemsIdRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.PutWatchlistItemsIdResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ButtonclikrApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ButtonclikrApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ButtonclikrApiTimeoutError();
            case "unknown":
                throw new errors.ButtonclikrApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete a WatchlistItem. A WatchlistItem is a set of attributes of a person or entity of interest.
     *
     * @param {unknown} id - The ID of this resource.
     * @param {ButtonclikrApi.DeleteWatchlistItemsIdRequest} request
     * @param {Watchlists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.watchlists.deleteWatchlistItemsId({
     *         "key": "value"
     *     }, {
     *         expand: "string",
     *         unmask: "string"
     *     })
     */
    public async deleteWatchlistItemsId(
        id: unknown,
        request: ButtonclikrApi.DeleteWatchlistItemsIdRequest,
        requestOptions?: Watchlists.RequestOptions
    ): Promise<ButtonclikrApi.DeleteWatchlistItemsIdResponse> {
        const { expand, unmask } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        _queryParams["expand"] = expand;
        _queryParams["unmask"] = unmask;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ButtonclikrApiEnvironment.Default,
                `watchlistItems/${encodeURIComponent(id)}`
            ),
            method: "DELETE",
            headers: {
                search:
                    (await core.Supplier.get(this._options.search)) != null
                        ? await core.Supplier.get(this._options.search)
                        : undefined,
                SESSIONKEY: await core.Supplier.get(this._options.sessionkey),
                TXNSESSIONKEY: await core.Supplier.get(this._options.txnsessionkey),
                USERNAME: await core.Supplier.get(this._options.username),
                PASSWORD: await core.Supplier.get(this._options.password),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@imdb/sdk-9754",
                "X-Fern-SDK-Version": "0.0.8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.DeleteWatchlistItemsIdResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ButtonclikrApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ButtonclikrApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ButtonclikrApiTimeoutError();
            case "unknown":
                throw new errors.ButtonclikrApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Query a WatchlistItem. A WatchlistItem is a set of attributes of a person or entity of interest.
     *
     * @param {ButtonclikrApi.GetWatchlistItemsRequest} request
     * @param {Watchlists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.watchlists.getWatchlistItems({
     *         expand: "string",
     *         unmask: "string",
     *         pageNumber: "string",
     *         pageLimit: "string"
     *     })
     */
    public async getWatchlistItems(
        request: ButtonclikrApi.GetWatchlistItemsRequest,
        requestOptions?: Watchlists.RequestOptions
    ): Promise<ButtonclikrApi.GetWatchlistItemsResponse> {
        const { expand, unmask, pageNumber, pageLimit } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        _queryParams["expand"] = expand;
        _queryParams["unmask"] = unmask;
        _queryParams["page[number]"] = pageNumber;
        _queryParams["page[limit]"] = pageLimit;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ButtonclikrApiEnvironment.Default,
                "watchlistItems"
            ),
            method: "GET",
            headers: {
                search:
                    (await core.Supplier.get(this._options.search)) != null
                        ? await core.Supplier.get(this._options.search)
                        : undefined,
                SESSIONKEY: await core.Supplier.get(this._options.sessionkey),
                TXNSESSIONKEY: await core.Supplier.get(this._options.txnsessionkey),
                USERNAME: await core.Supplier.get(this._options.username),
                PASSWORD: await core.Supplier.get(this._options.password),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@imdb/sdk-9754",
                "X-Fern-SDK-Version": "0.0.8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.GetWatchlistItemsResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ButtonclikrApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ButtonclikrApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ButtonclikrApiTimeoutError();
            case "unknown":
                throw new errors.ButtonclikrApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Create a WatchlistItem. A WatchlistItem is a set of attributes of a person or entity of interest.
     *
     * @param {ButtonclikrApi.PostWatchlistItemsRequest} request
     * @param {Watchlists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.watchlists.postWatchlistItems({
     *         watchlist: {
     *             "key": "value"
     *         },
     *         type: ButtonclikrApi.PostWatchlistItemsRequestType.Entity,
     *         name: {
     *             "key": "value"
     *         },
     *         title: {
     *             "key": "value"
     *         },
     *         first: {
     *             "key": "value"
     *         },
     *         middle: {
     *             "key": "value"
     *         },
     *         last: {
     *             "key": "value"
     *         },
     *         ein: {
     *             "key": "value"
     *         },
     *         ssn: {
     *             "key": "value"
     *         },
     *         dob: {
     *             "key": "value"
     *         },
     *         dl: {
     *             "key": "value"
     *         },
     *         dlstate: "string",
     *         email: {
     *             "key": "value"
     *         },
     *         website: {
     *             "key": "value"
     *         },
     *         ipAddress: {
     *             "key": "value"
     *         },
     *         payment: {
     *             method: ButtonclikrApi.PostWatchlistItemsRequestPaymentMethod.One,
     *             number: {
     *                 "key": "value"
     *             },
     *             routing: {
     *                 "key": "value"
     *             }
     *         },
     *         bin: {
     *             "key": "value"
     *         },
     *         last4: {
     *             "key": "value"
     *         },
     *         keyword: {
     *             "key": "value"
     *         },
     *         ref: {
     *             "key": "value"
     *         },
     *         custom: {
     *             "key": "value"
     *         },
     *         notes: {
     *             "key": "value"
     *         },
     *         address1: {
     *             "key": "value"
     *         },
     *         address2: {
     *             "key": "value"
     *         },
     *         city: {
     *             "key": "value"
     *         },
     *         state: "string",
     *         zip: {
     *             "key": "value"
     *         },
     *         country: ButtonclikrApi.PostWatchlistItemsRequestCountry.Abw,
     *         phone: {
     *             "key": "value"
     *         },
     *         fax: {
     *             "key": "value"
     *         },
     *         inactive: ButtonclikrApi.PostWatchlistItemsRequestInactive.Zero,
     *         frozen: ButtonclikrApi.PostWatchlistItemsRequestFrozen.Zero
     *     })
     */
    public async postWatchlistItems(
        request: ButtonclikrApi.PostWatchlistItemsRequest,
        requestOptions?: Watchlists.RequestOptions
    ): Promise<ButtonclikrApi.PostWatchlistItemsResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ButtonclikrApiEnvironment.Default,
                "watchlistItems"
            ),
            method: "POST",
            headers: {
                search:
                    (await core.Supplier.get(this._options.search)) != null
                        ? await core.Supplier.get(this._options.search)
                        : undefined,
                SESSIONKEY: await core.Supplier.get(this._options.sessionkey),
                TXNSESSIONKEY: await core.Supplier.get(this._options.txnsessionkey),
                USERNAME: await core.Supplier.get(this._options.username),
                PASSWORD: await core.Supplier.get(this._options.password),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@imdb/sdk-9754",
                "X-Fern-SDK-Version": "0.0.8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.PostWatchlistItemsRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.PostWatchlistItemsResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ButtonclikrApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ButtonclikrApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ButtonclikrApiTimeoutError();
            case "unknown":
                throw new errors.ButtonclikrApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Query a Watchlist. A Watchlist is a list of WatchlistItems.
     * WatchlistItems will be associated with a Watchlist and can be used in Decisions.
     *
     * @param {unknown} id - The ID of this resource.
     * @param {ButtonclikrApi.GetWatchlistsIdRequest} request
     * @param {Watchlists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.watchlists.getWatchlistsId({
     *         "key": "value"
     *     }, {
     *         expand: "string",
     *         unmask: "string"
     *     })
     */
    public async getWatchlistsId(
        id: unknown,
        request: ButtonclikrApi.GetWatchlistsIdRequest,
        requestOptions?: Watchlists.RequestOptions
    ): Promise<ButtonclikrApi.GetWatchlistsIdResponse> {
        const { expand, unmask } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        _queryParams["expand"] = expand;
        _queryParams["unmask"] = unmask;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ButtonclikrApiEnvironment.Default,
                `watchlists/${encodeURIComponent(id)}`
            ),
            method: "GET",
            headers: {
                search:
                    (await core.Supplier.get(this._options.search)) != null
                        ? await core.Supplier.get(this._options.search)
                        : undefined,
                SESSIONKEY: await core.Supplier.get(this._options.sessionkey),
                TXNSESSIONKEY: await core.Supplier.get(this._options.txnsessionkey),
                USERNAME: await core.Supplier.get(this._options.username),
                PASSWORD: await core.Supplier.get(this._options.password),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@imdb/sdk-9754",
                "X-Fern-SDK-Version": "0.0.8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.GetWatchlistsIdResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ButtonclikrApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ButtonclikrApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ButtonclikrApiTimeoutError();
            case "unknown":
                throw new errors.ButtonclikrApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Update a Watchlist. A Watchlist is a list of WatchlistItems.
     * WatchlistItems will be associated with a Watchlist and can be used in Decisions.
     *
     * @param {unknown} id - The ID of this resource.
     * @param {ButtonclikrApi.PutWatchlistsIdRequest} request
     * @param {Watchlists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.watchlists.putWatchlistsId({
     *         "key": "value"
     *     }, {
     *         login: {
     *             "key": "value"
     *         },
     *         integration: ButtonclikrApi.PutWatchlistsIdRequestIntegration.Apple,
     *         name: {
     *             "key": "value"
     *         },
     *         description: {
     *             "key": "value"
     *         },
     *         default: ButtonclikrApi.PutWatchlistsIdRequestDefault.Zero,
     *         custom: {
     *             "key": "value"
     *         },
     *         inactive: ButtonclikrApi.PutWatchlistsIdRequestInactive.Zero,
     *         frozen: ButtonclikrApi.PutWatchlistsIdRequestFrozen.Zero
     *     })
     */
    public async putWatchlistsId(
        id: unknown,
        request: ButtonclikrApi.PutWatchlistsIdRequest,
        requestOptions?: Watchlists.RequestOptions
    ): Promise<ButtonclikrApi.PutWatchlistsIdResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ButtonclikrApiEnvironment.Default,
                `watchlists/${encodeURIComponent(id)}`
            ),
            method: "PUT",
            headers: {
                search:
                    (await core.Supplier.get(this._options.search)) != null
                        ? await core.Supplier.get(this._options.search)
                        : undefined,
                SESSIONKEY: await core.Supplier.get(this._options.sessionkey),
                TXNSESSIONKEY: await core.Supplier.get(this._options.txnsessionkey),
                USERNAME: await core.Supplier.get(this._options.username),
                PASSWORD: await core.Supplier.get(this._options.password),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@imdb/sdk-9754",
                "X-Fern-SDK-Version": "0.0.8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.PutWatchlistsIdRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.PutWatchlistsIdResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ButtonclikrApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ButtonclikrApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ButtonclikrApiTimeoutError();
            case "unknown":
                throw new errors.ButtonclikrApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete a Watchlist. A Watchlist is a list of WatchlistItems.
     * WatchlistItems will be associated with a Watchlist and can be used in Decisions.
     *
     * @param {unknown} id - The ID of this resource.
     * @param {ButtonclikrApi.DeleteWatchlistsIdRequest} request
     * @param {Watchlists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.watchlists.deleteWatchlistsId({
     *         "key": "value"
     *     }, {
     *         expand: "string",
     *         unmask: "string"
     *     })
     */
    public async deleteWatchlistsId(
        id: unknown,
        request: ButtonclikrApi.DeleteWatchlistsIdRequest,
        requestOptions?: Watchlists.RequestOptions
    ): Promise<ButtonclikrApi.DeleteWatchlistsIdResponse> {
        const { expand, unmask } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        _queryParams["expand"] = expand;
        _queryParams["unmask"] = unmask;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ButtonclikrApiEnvironment.Default,
                `watchlists/${encodeURIComponent(id)}`
            ),
            method: "DELETE",
            headers: {
                search:
                    (await core.Supplier.get(this._options.search)) != null
                        ? await core.Supplier.get(this._options.search)
                        : undefined,
                SESSIONKEY: await core.Supplier.get(this._options.sessionkey),
                TXNSESSIONKEY: await core.Supplier.get(this._options.txnsessionkey),
                USERNAME: await core.Supplier.get(this._options.username),
                PASSWORD: await core.Supplier.get(this._options.password),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@imdb/sdk-9754",
                "X-Fern-SDK-Version": "0.0.8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.DeleteWatchlistsIdResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ButtonclikrApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ButtonclikrApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ButtonclikrApiTimeoutError();
            case "unknown":
                throw new errors.ButtonclikrApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Query a Watchlist. A Watchlist is a list of WatchlistItems.
     * WatchlistItems will be associated with a Watchlist and can be used in Decisions.
     *
     * @param {ButtonclikrApi.GetWatchlistsRequest} request
     * @param {Watchlists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.watchlists.getWatchlists({
     *         expand: "string",
     *         unmask: "string",
     *         pageNumber: "string",
     *         pageLimit: "string"
     *     })
     */
    public async getWatchlists(
        request: ButtonclikrApi.GetWatchlistsRequest,
        requestOptions?: Watchlists.RequestOptions
    ): Promise<ButtonclikrApi.GetWatchlistsResponse> {
        const { expand, unmask, pageNumber, pageLimit } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        _queryParams["expand"] = expand;
        _queryParams["unmask"] = unmask;
        _queryParams["page[number]"] = pageNumber;
        _queryParams["page[limit]"] = pageLimit;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ButtonclikrApiEnvironment.Default,
                "watchlists"
            ),
            method: "GET",
            headers: {
                search:
                    (await core.Supplier.get(this._options.search)) != null
                        ? await core.Supplier.get(this._options.search)
                        : undefined,
                SESSIONKEY: await core.Supplier.get(this._options.sessionkey),
                TXNSESSIONKEY: await core.Supplier.get(this._options.txnsessionkey),
                USERNAME: await core.Supplier.get(this._options.username),
                PASSWORD: await core.Supplier.get(this._options.password),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@imdb/sdk-9754",
                "X-Fern-SDK-Version": "0.0.8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.GetWatchlistsResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ButtonclikrApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ButtonclikrApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ButtonclikrApiTimeoutError();
            case "unknown":
                throw new errors.ButtonclikrApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Create a Watchlist. A Watchlist is a list of WatchlistItems.
     * WatchlistItems will be associated with a Watchlist and can be used in Decisions.
     *
     * @param {ButtonclikrApi.PostWatchlistsRequest} request
     * @param {Watchlists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.watchlists.postWatchlists({
     *         login: {
     *             "key": "value"
     *         },
     *         integration: ButtonclikrApi.PostWatchlistsRequestIntegration.Apple,
     *         name: {
     *             "key": "value"
     *         },
     *         description: {
     *             "key": "value"
     *         },
     *         default: ButtonclikrApi.PostWatchlistsRequestDefault.Zero,
     *         custom: {
     *             "key": "value"
     *         },
     *         inactive: ButtonclikrApi.PostWatchlistsRequestInactive.Zero,
     *         frozen: ButtonclikrApi.PostWatchlistsRequestFrozen.Zero
     *     })
     */
    public async postWatchlists(
        request: ButtonclikrApi.PostWatchlistsRequest,
        requestOptions?: Watchlists.RequestOptions
    ): Promise<ButtonclikrApi.PostWatchlistsResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.ButtonclikrApiEnvironment.Default,
                "watchlists"
            ),
            method: "POST",
            headers: {
                search:
                    (await core.Supplier.get(this._options.search)) != null
                        ? await core.Supplier.get(this._options.search)
                        : undefined,
                SESSIONKEY: await core.Supplier.get(this._options.sessionkey),
                TXNSESSIONKEY: await core.Supplier.get(this._options.txnsessionkey),
                USERNAME: await core.Supplier.get(this._options.username),
                PASSWORD: await core.Supplier.get(this._options.password),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@imdb/sdk-9754",
                "X-Fern-SDK-Version": "0.0.8",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.PostWatchlistsRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.PostWatchlistsResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ButtonclikrApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ButtonclikrApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ButtonclikrApiTimeoutError();
            case "unknown":
                throw new errors.ButtonclikrApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { APIKEY: apiKeyValue };
    }
}
