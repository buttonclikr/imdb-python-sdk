/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as ButtonclikrApi from "../../api/index";
import * as core from "../../core";
import { Id } from "./Id";
import { Created } from "./Created";
import { Modified } from "./Modified";
import { Creator } from "./Creator";
import { Modifier } from "./Modifier";
import { EntityResponseModelState } from "./EntityResponseModelState";
import { EntityResponseModelCountry } from "./EntityResponseModelCountry";
import { EntityResponseModelTimezone } from "./EntityResponseModelTimezone";
import { EntityResponseModelEinType } from "./EntityResponseModelEinType";
import { EntityResponseModelGlobalBusinessType } from "./EntityResponseModelGlobalBusinessType";
import { EntityResponseModelTinStatus } from "./EntityResponseModelTinStatus";
import { EntityResponseModelPublic } from "./EntityResponseModelPublic";
import { EntityResponseModelReserved } from "./EntityResponseModelReserved";
import { EntityResponseModelPendingRiskCheck } from "./EntityResponseModelPendingRiskCheck";
import { EntityResponseModelCheckStage } from "./EntityResponseModelCheckStage";
import { EntityResponseModelCurrency } from "./EntityResponseModelCurrency";
import { Frozen } from "./Frozen";
import { Inactive } from "./Inactive";

export const EntityResponseModel: core.serialization.ObjectSchema<
    serializers.EntityResponseModel.Raw,
    ButtonclikrApi.EntityResponseModel
> = core.serialization.object({
    id: Id.optional(),
    created: Created.optional(),
    modified: Modified.optional(),
    creator: Creator.optional(),
    modifier: Modifier.optional(),
    ipCreated: core.serialization.string().optional(),
    ipModified: core.serialization.string().optional(),
    clientIp: core.serialization.string().optional(),
    login: core.serialization.string().optional(),
    parameter: core.serialization.string().optional(),
    firstDisbursement: core.serialization.string().optional(),
    totalCreditDisbursements: core.serialization.string().optional(),
    type: core.serialization.property("-type", core.serialization.number().optional()),
    name: core.serialization.string().optional(),
    displayName: core.serialization.string().optional(),
    address1: core.serialization.string().optional(),
    address2: core.serialization.string().optional(),
    city: core.serialization.string().optional(),
    state: EntityResponseModelState.optional(),
    website: core.serialization.string().optional(),
    appleDomain: core.serialization.string().optional(),
    zip: core.serialization.string().optional(),
    country: EntityResponseModelCountry.optional(),
    timezone: EntityResponseModelTimezone.optional(),
    phone: core.serialization.string().optional(),
    customerPhone: core.serialization.string().optional(),
    fax: core.serialization.string().optional(),
    email: core.serialization.string().optional(),
    ein: core.serialization.string().optional(),
    einType: EntityResponseModelEinType.optional(),
    globalBusinessId: core.serialization.string().optional(),
    globalBusinessType: EntityResponseModelGlobalBusinessType.optional(),
    irsFilingName: core.serialization.string().optional(),
    locations: core.serialization.string().optional(),
    tcVersion: core.serialization.string().optional(),
    tcDate: core.serialization.date().optional(),
    tcIp: core.serialization.string().optional(),
    tcAcceptDate: core.serialization.string().optional(),
    tcAcceptIp: core.serialization.string().optional(),
    custom: core.serialization.string().optional(),
    tinStatus: EntityResponseModelTinStatus.optional(),
    public: EntityResponseModelPublic.optional(),
    reserved: EntityResponseModelReserved.optional(),
    pendingRiskCheck: EntityResponseModelPendingRiskCheck.optional(),
    checkStage: EntityResponseModelCheckStage.optional(),
    industry: core.serialization.string().optional(),
    payoutSecondaryDescriptor: core.serialization.string().optional(),
    currency: EntityResponseModelCurrency.optional(),
    frozen: Frozen.optional(),
    inactive: Inactive.optional(),
});

export declare namespace EntityResponseModel {
    interface Raw {
        id?: Id.Raw | null;
        created?: Created.Raw | null;
        modified?: Modified.Raw | null;
        creator?: Creator.Raw | null;
        modifier?: Modifier.Raw | null;
        ipCreated?: string | null;
        ipModified?: string | null;
        clientIp?: string | null;
        login?: string | null;
        parameter?: string | null;
        firstDisbursement?: string | null;
        totalCreditDisbursements?: string | null;
        "-type"?: number | null;
        name?: string | null;
        displayName?: string | null;
        address1?: string | null;
        address2?: string | null;
        city?: string | null;
        state?: EntityResponseModelState.Raw | null;
        website?: string | null;
        appleDomain?: string | null;
        zip?: string | null;
        country?: EntityResponseModelCountry.Raw | null;
        timezone?: EntityResponseModelTimezone.Raw | null;
        phone?: string | null;
        customerPhone?: string | null;
        fax?: string | null;
        email?: string | null;
        ein?: string | null;
        einType?: EntityResponseModelEinType.Raw | null;
        globalBusinessId?: string | null;
        globalBusinessType?: EntityResponseModelGlobalBusinessType.Raw | null;
        irsFilingName?: string | null;
        locations?: string | null;
        tcVersion?: string | null;
        tcDate?: string | null;
        tcIp?: string | null;
        tcAcceptDate?: string | null;
        tcAcceptIp?: string | null;
        custom?: string | null;
        tinStatus?: EntityResponseModelTinStatus.Raw | null;
        public?: EntityResponseModelPublic.Raw | null;
        reserved?: EntityResponseModelReserved.Raw | null;
        pendingRiskCheck?: EntityResponseModelPendingRiskCheck.Raw | null;
        checkStage?: EntityResponseModelCheckStage.Raw | null;
        industry?: string | null;
        payoutSecondaryDescriptor?: string | null;
        currency?: EntityResponseModelCurrency.Raw | null;
        frozen?: Frozen.Raw | null;
        inactive?: Inactive.Raw | null;
    }
}
