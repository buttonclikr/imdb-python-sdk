/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as ButtonclikrApi from "../../../../index";

/**
 * @example
 *     {
 *         binType: ButtonclikrApi.TerminalTxnsPostReqBodySchemaModelBinType.Credit,
 *         origin: 1,
 *         pos: 1,
 *         type: 1,
 *         currency: ButtonclikrApi.TerminalTxnsCurrencyProperty.Aed,
 *         fundingCurrency: ButtonclikrApi.TerminalTxnsCurrencyProperty.Aed,
 *         swiped: 1,
 *         merchant: "merchant",
 *         mid: "mid",
 *         pin: 1,
 *         reserved: 1,
 *         signature: 1,
 *         total: 1,
 *         status: 1,
 *         inactive: 1,
 *         frozen: 1
 *     }
 */
export interface TerminalTxnsPostReqBodySchemaModel {
    /**
     * The type of bank issuer number (BIN) that allows for resulting transactions.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `CREDIT` - **Credit BIN Type.**
     *
     * - `DEBIT` - **Debit BIN Type.**
     *
     * </details>
     *
     */
    binType: ButtonclikrApi.TerminalTxnsPostReqBodySchemaModelBinType;
    /** The expiration date of this Transaction. This field is stored as a text string in 'MMYY' format, where 'MM' is the number of a month and 'YY' is the last two digits of a year. For example, '0623' for June 2023. The value must reflect a future date. */
    expiration?: string;
    forterminalTxn?: string;
    /**
     * The origination point of this Transaction. This field is set to `1` (Credit Card Terminal) by default.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `1` - **Credit Card Terminal.**
     *
     * - `2` - **eCommerce System.**
     *
     * - `3` - **Mail or Telephone Order Transaction.**
     *
     * - `4` - **Apple Pay.**
     *
     * - `5` - **Successful 3D Secure Transaction.**
     *
     * - `6` - **Attempted 3D Secure Transaction.**
     *
     * - `7` - **Recurring Card Transaction.**
     *
     * - `8` - **Payframe.**
     *
     * </details>
     *
     */
    origin: number;
    payment?: ButtonclikrApi.TerminalTxnsPaymentProperty;
    /** The platform used to process this Transaction. */
    platform?: ButtonclikrApi.TerminalTxnsPostReqBodySchemaModelPlatform;
    /**
     * Whether the terminalTxn is coming from a POS system that needs terminal activation.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **POS Terminal Activation.** (Internal)
     *
     * - `1` - **External Terminal Activation.**
     *
     * </details>
     *
     */
    pos: number;
    /**
     * Whether the terminal should print a receipt or not.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `noReceipt` - **No Receipt.**
     *
     * - `merchant` - **Merchant copy only.**
     *
     * - `customer` - **Customer copy only.**
     *
     * - `both` - **Merchant and Customer copy.**
     *
     * </details>
     *
     */
    receipt?: ButtonclikrApi.TerminalTxnsPostReqBodySchemaModelReceipt;
    /** The Terminal ID as set by the platform activating the terminal. This field is stored as a text string and must be between 0 and 50 characters long. */
    tid?: string;
    /** Sequencial number that uniquely identifies the terminalTxn. */
    traceNumber?: number;
    /** The related txn this terminalTxn belongs to. */
    txn?: string;
    /** The ID of the token record from which to retrieve the payment and customer details. */
    token?: string;
    /** The last four numbers of the credit card associated with this Transaction. */
    paymentNumber?: number;
    /** The payment method for this Transaction. */
    paymentMethod?: ButtonclikrApi.TerminalTxnsPostReqBodySchemaModelPaymentMethod;
    type: ButtonclikrApi.TerminalTxnsTypeProperty;
    tip?: number;
    originatingApp?: string;
    oemtTxnRefNumber?: string;
    /** Express assigned identifier i.e. Software Id being used in express terminal. */
    posApplicationId?: string;
    /** Software Name being used in express terminal. */
    posApplicationName?: string;
    /** Software version being used in express terminal. */
    posApplicationVersion?: string;
    /** Express Reference Number. */
    customerReferenceNumber?: string;
    /** The gateway transaction ID relates to Express Transaction ID. */
    gatewayTransactionId?: string;
    /** Express ticket Number. */
    customerTicketNumber?: string;
    /** The authorization code for this Transaction. This field is stored as a text string and must be between 0 and 20 characters long. */
    authCode?: string;
    /** The date on which the Transaction was authorized. The date is specified as an eight digit string in YYYYMMDD format, for example, '20160120' for January 20, 2016. The value of this field must represent a date in the past. */
    authDate?: number;
    /** The amount of the total sum of this Transaction that is given as cash back. This field is specified as an integer in cents. */
    cashback?: number;
    /** The client IP address from which the Transaction was created. Valid values are any Ipv4 or Ipv6 address. */
    clientIp?: string;
    /** The name of the company associated with this Transaction. nSetting this field is especially important when processing an eCheck from a company. */
    company?: string;
    currency: ButtonclikrApi.TerminalTxnsCurrencyProperty;
    fundingCurrency: ButtonclikrApi.TerminalTxnsCurrencyProperty;
    /**
     * The status of the CVV on the card.
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `notPresent` - **CVV is not present.**
     *
     * - `illegible` - **CVV is illegible.**
     *
     * - `notProvided` - **CVV was not provided.**
     *
     * </details>
     *
     */
    cvvStatus?: ButtonclikrApi.TerminalTxnsPostReqBodySchemaModelCvvStatus;
    /** A description of this Transaction. This field is stored as a text string and must be between 0 and 1000 characters long. */
    description?: string;
    /** The discount applied to the transaction. */
    discount?: number;
    /** The duty fee applicable to this transaction. */
    duty?: number;
    /** The email associated with this Transaction. */
    email?: string;
    /**
     * Whether the card was swiped during this Transaction. This field is set to '1' automatically if 'track' data was received.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     *   - `0` - **Not swiped.**
     *
     *   - `1` - **Swiped.**
     * </details>
     *
     */
    swiped: number;
    entryMode?: ButtonclikrApi.TerminalTxnsEntryModeProperty;
    /** Optional calculated fee amount indicator. This should be used in conjunction with txnFee setting on Fees resource. This field is specified as an integer in cents. */
    fee?: number;
    /** the total amount of fees, in 'cents', 'assessed' on the merchant already from the fee amount indicated. */
    feeConsumed?: number;
    /** The first name associated with this Transaction. For eCheck transactions, either first or last is required. */
    first?: string;
    /** The last name associated with this Transaction. For eCheck transactions, either first or last is required. */
    last?: string;
    /** The identifier of the Merchant associated with this Transaction. */
    merchant: string;
    /** The Merchant ID as set by the processor. This field is stored as a text string and must be between 0 and 50 characters long. */
    mid: string;
    /** The middle name associated with this Transaction. */
    middle?: string;
    /** The identifier of the Order associated with this Transaction. This field is stored as a text string and must be between 0 and 1000 characters long. */
    order?: string;
    /**
     * Whether this Transaction was verified with a PIN.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     *   - `0` - **PIN not entered.**
     *
     *   - `1` - **PIN entered.**
     * </details>
     *
     */
    pin: number;
    /**
     * Indicates whether the Transaction is reserved and the action that will be taken as a result.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **No reserve.**
     *
     * - `1` - **Transaction processing withheld.**
     *
     * - `3` - **Transaction capture withheld pending manual review.**
     *
     * - `4` - **Move all funds from this Transaction into a reserve.**
     *
     * - `5` - **Block current activity, no change for merchant.**
     *
     * </details>
     *
     */
    reserved: number;
    /** The shipping fee pertaining to this transaction. */
    shipping?: number;
    /**
     * Whether a signature should be captured during this Transaction.
     *
     * * You can set this field if want the terminal to take a signature for the Transaction.
     * * The API also sets this field automatically if you associate a signature to the Transaction by creating a 'terminalTxnDatas' resource.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     *   - `0` - **Not captured.**
     *
     *   - `1` - **Captured.**
     * </details>
     *
     */
    signature: number;
    /** The amount of the total sum of this Transaction that is made up of tax. This field is specified as an integer in cents. */
    tax?: number;
    /** The identifier of the terminal that processed this Transaction. The identifier is taken from the terminal system and varies in format according to the type of terminal. This field is stored as a text string and must be between 0 and 50 characters long. */
    terminal?: string;
    /**
     * Capabilities of the terminal device.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `1` - **Key entry only terminal.**
     *
     * - `2` - **Can read magnetic stripe.**
     *
     * - `3` - **Integrated circuit reader.**
     *
     * - `4` - **TBD**
     *
     * </details>
     *
     */
    terminalCapability?: number;
    /** The total amount of this Transaction. This field is specified as an integer in cents. */
    total: number;
    /**
     * Whether the card was swiped at an unattended terminal during this Transaction. This field is set to '0' by default.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **Attended terminal.**
     *
     * - `1` - **Unattended terminal.**
     *
     * </details>
     *
     */
    unattended?: number;
    /**
     * The status of the Transaction.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **Pending**
     *
     * - `1` - **Approved**
     *
     * - `2` - **Failed**
     *
     * - `3` - **Captured**
     *
     * - `4` - **Settled**
     *
     * - `5` - **Returned**
     *
     * </details>
     *
     */
    status: number;
    /** The first line of the address associated with this Transaction. This field is stored as a text string and must be between 1 and 500 characters long. */
    address1?: string;
    /** The second line of the address associated with this Transaction. This field is stored as a text string and must be between 1 and 500 characters long. */
    address2?: string;
    /** The name of the city in the address associated with this Transaction. This field is stored as a text string and must be between 1 and 500 characters long. */
    city?: string;
    /** The state associated with this Transaction. nIf in the U.S. this is specified as the 2 character postal abbreviation for the state, if outside of the U.S. the full state name. This field is stored as a text string and must be between 2 and 100 characters long. */
    state?: ButtonclikrApi.TerminalTxnsPostReqBodySchemaModelState;
    /** The ZIP code in the address associated with this Transaction. This field is stored as a text string and must be between 1 and 20 characters long. */
    zip?: string;
    country?: ButtonclikrApi.TerminalTxnsCountryProperty;
    /** The phone number associated with this Transaction. This field is stored as a text string and must be between 10 and 15 characters long. */
    phone?: string;
    inactive: ButtonclikrApi.Inactive;
    frozen: ButtonclikrApi.Frozen;
}
