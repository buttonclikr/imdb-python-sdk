/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as ButtonclikrApi from "../index";

export interface TerminalTxnsModel {
    id?: ButtonclikrApi.Id;
    created?: ButtonclikrApi.Created;
    modified?: ButtonclikrApi.Modified;
    creator?: ButtonclikrApi.Creator;
    modifier?: ButtonclikrApi.Modifier;
    /** The incoming ip address from which this Transaction was created. */
    ipCreated?: string;
    /** The incoming ip address from which this Transaction was last modified. */
    ipModified?: string;
    /** The identifier of the Merchant associated with this Transaction. */
    merchant?: string;
    /** The Merchant ID, as set by the processor, is stored as a text string and must be between 0 and 50 characters long. */
    mid?: string;
    /** The related txn this terminalTxn belongs to. */
    txn?: string;
    token?: string;
    /** The last four numbers of the credit card associated with this Transaction. */
    paymentNumber?: number;
    /** The payment method for this Transaction. */
    paymentMethod?: number;
    /** The payment method associated with this Transaction, including the card details. */
    payment?: string;
    /** The terminalTxn ID of the original terminal activation request to which this terminal activation request is in reference */
    forterminalTxn?: string;
    type?: ButtonclikrApi.TerminalTxnsTypeProperty;
    /** The expiration date of this Transaction. This field is stored as a text string in 'MMYY' format, where 'MM' is the number of a month and 'YY' is the last two digits of a year. For example, '0623' for June 2023. The value must reflect a future date. */
    expiration?: string;
    currency?: ButtonclikrApi.TerminalTxnsCurrencyProperty;
    fundingCurrency?: ButtonclikrApi.TerminalTxnsCurrencyProperty;
    /** Optional calculated fee amount indicator, which should be used in conjunction with txnFee setting on Fees resource, is specified as an integer in cents. */
    fee?: number;
    /** The total amount of fees, in 'cents', 'assessed' on the merchant already from the fee amount indicated. */
    feeConsumed?: number;
    /** The platform used to process this Transaction. */
    platform?: ButtonclikrApi.TerminalTxnsModelPlatform;
    /** The date on which the Transaction was authorized, specified as an eight digit string in YYYYMMDD format, for example, '20160120' for January 20, 2016, and the value of this field must represent a date in the past. */
    authDate?: number;
    /** The authorization code for this Transaction. This field is stored as a text string and must be between 0 and 20 characters long. */
    authCode?: string;
    /** The identifier of the Order associated with this Transaction, This field is stored as a text string and must be between 0 and 1000 characters long. */
    order?: string;
    /** A description of this Transaction. This field is stored as a text string and must be between 0 and 1000 characters long. */
    description?: string;
    /** Sequencial number that uniquely identifies the terminalTxn. */
    traceNumber?: number;
    /** The discount applied to the transaction. */
    discount?: number;
    /** The shipping fee pertaining to this transaction. */
    shipping?: number;
    /** The duty fee applicable to this transaction. */
    duty?: number;
    /** The identifier of the terminal that processed this Transaction, which is taken from the terminal system and varies in format according to the type of terminal, is stored as a text string and must be between 0 and 50 characters long. */
    terminal?: string;
    /** The Terminal ID as set by the platform activating the terminal, stored as a text string and must be between 0 and 50 characters long. */
    tid?: string;
    /**
     * Capabilities of the terminal device <details><summary>ValidValues</summary>
     *
     * - `1` - **Key entry only terminal**.
     *
     * - `2` - **Can read magnetic stripe**.
     *
     * - `3` - **Integrated circuit reader**.
     *
     * - `4` - **TBD**
     *
     * </details>
     */
    terminalCapability?: number;
    entryMode?: ButtonclikrApi.TerminalTxnsEntryModeProperty;
    /**
     * The origin of this Transaction is set to ''1'' (Credit Card Terminal) by default, which can be one of the following: <details><summary>Valid Values</summary>
     *
     * - `1` - **Credit Card Terminal.**
     *
     * - `2` - **eCommerce System.**
     *
     * - `3` - **Mail or Telephone Order Transaction.**
     *
     * - `4` - **Apple Pay.**
     *
     * - `5` - **Successful 3D Secure Transaction.**
     *
     * - `6` - **Attempted 3D Secure Transaction.**
     *
     * - `7` - **Recurring Card Transaction.**
     *
     * - `8` - **Payframe.**
     *
     * </details>
     */
    origin?: number;
    /** The amount of the total sum of this Transaction that is made up of tax, This field is specified as an integer in cents. */
    tax?: number;
    /** The total amount of this Transaction, This field is specified as an integer in cents. */
    total?: number;
    tip?: number;
    /** The amount of the total sum of this Transaction that is given as cash back, specified as an integer in cents. */
    cashback?: number;
    /** The authorization code for this Transaction, as returned by the network. */
    authorization?: string;
    /** The total amount that was approved for this Transaction by the processor, which is specified as an integer in cents. */
    approved?: number;
    /** Whether correct cvv was sent during this Transaction. */
    cvv?: number;
    /**
     * The status of the CVV on the card.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `notPresent` - **CVV is not present.**
     *
     * - `illegible` - **CVV is illegible.**
     *
     * - `notProvided` - **CVV was not provided.**
     *
     * </details>
     */
    cvvStatus?: ButtonclikrApi.TerminalTxnsModelCvvStatus;
    /**
     * Whether the card was swiped during this Transaction. This field is set to '1' automatically if 'track' data was received.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **Not Swiped.**
     *
     * - `1` - **Swiped.**
     * </details>
     */
    swiped?: number;
    /**
     * Whether the card was dipped (using the EMV chip) during this Transaction.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **Not dipped.**
     *
     * - `1` - **Dipped.**
     * </details>
     */
    emv?: number;
    /**
     * Whether a signature should be captured during this Transaction.
     *
     * - You can set this field if want the terminal to take a signature for the Transaction.
     * - The API also sets this field automatically if you associate a signature to the Transaction by creating a 'terminalTxnDatas' resource.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **Not captured.**
     *
     * - `1` - **Captured.**
     * </details>
     */
    signature?: number;
    /**
     * Whether this Transaction was verified with a PIN or not
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **PIN not entered.**
     *
     * - `1` - **PIN entered.**
     * </details>
     */
    pin?: number;
    /**
     * Whether the card was swiped at an unattended terminal during this Transaction. This field is set to '0' by default.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **Attended terminal.**
     *
     * - `1` - **Unattended terminal.**
     *
     * </details>
     */
    unattended?: number;
    /**
     * Whether the terminalTxn is coming from a POS system that needs terminal activation.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **POS Terminal Activation.** (Internal)
     *
     * - `1` - **External Terminal Activation.**
     *
     * </details>
     */
    pos?: number;
    /**
     * The type of bank issuer number (BIN) that allows for resulting transactions.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `CREDIT` - **Credit BIN Type.**
     *
     * - `DEBIT` - **Debit BIN Type.**
     *
     * </details>
     */
    binType?: ButtonclikrApi.TerminalTxnsModelBinType;
    /**
     * Whether the terminal should print a receipt or not.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `noReceipt` - **No Receipt.**
     *
     * - `merchant` - **Merchant copy only.**
     *
     * - `customer` - **Customer copy only.**
     *
     * - `both` - **Merchant and Customer copy.**
     *
     * </details>
     */
    receipt?: ButtonclikrApi.TerminalTxnsModelReceipt;
    /** The client IP address from which the transaction was created, valid values are any IPv4 or IPv6 address. */
    clientIp?: string;
    /** The first name associated with this Transaction. For eCheck transactions, either first or last is required. */
    first?: string;
    /** The middle name associated with this Transaction. */
    middle?: string;
    /** The last name associated with this Transaction. For eCheck transactions, either first or last is required. */
    last?: string;
    /** The name of the company associated with this Transaction, setting this field is especially important when processing an eCheck from a company. */
    company?: string;
    /** The email associated with this Transaction. */
    email?: string;
    /** The first line of the address associated with this Transaction. This field is stored as a text string and must be between 1 and 500 characters long. */
    address1?: string;
    /** The second line of the address associated with this Transaction. This field is stored as a text string and must be between 1 and 500 characters long. */
    address2?: string;
    /** The city in the address associated with this Transaction, which is stored as a text string and must be between 1 and 500 characters long. */
    city?: string;
    /** The state associated with this Transaction; if in the U.S. this is specified as the 2 character postal abbreviation for the state, if outside of the U.S. the full state name. This field is stored as a text string and must be between 2 and 100 characters long. */
    state?: ButtonclikrApi.TerminalTxnsModelState;
    /** The ZIP code in the address associated with this Transaction, This field is stored as a text string and must be between 1 and 20 characters long. */
    zip?: string;
    country?: ButtonclikrApi.TerminalTxnsCountryProperty;
    /** The phone number associated with this transaction, stored as a text string and must be between 10 and 15 characters long. */
    phone?: string;
    /**
     * The status of the Transaction.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **Pending**
     *
     * - `1` - **Approved**
     *
     * - `2` - **Failed**
     *
     * - `3` - **Captured**
     *
     * - `4` - **Settled**
     *
     * - `5` - **Returned**
     *
     * </details>
     */
    status?: number;
    /** Indicates whether the Transaction is reserved and the action that will be taken as a result, with valid values including No reserve, Transaction processing withheld, Transaction capture withheld pending manual review, Move all funds from this Transaction into a reserve, Block current activity, no change for merchant, TBD, and TBD. */
    reserved?: number;
    /** The last transaction stage check for risk. */
    checkStage?: string;
    originatingApp?: string;
    oemtTxnRefNumber?: string;
    inactive?: ButtonclikrApi.Inactive;
    frozen?: ButtonclikrApi.Inactive;
    /** Express assigned identifier i.e. Software Id being used in express terminal. */
    posApplicationId?: string;
    /** Software Name being used in express terminal. */
    posApplicationName?: string;
    /** Software version being used in express terminal. */
    posApplicationVersion?: string;
    /** Express Reference Number. */
    customerReferenceNumber?: string;
    /** The gateway transaction ID relates to Express Transaction ID. */
    gatewayTransactionId?: string;
    /** Express ticket Number. */
    customerTicketNumber?: string;
}
