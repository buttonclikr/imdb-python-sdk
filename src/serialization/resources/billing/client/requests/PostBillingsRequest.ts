/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as ButtonclikrApi from "../../../../../api/index";
import * as core from "../../../../../core";
import { PostBillingsRequestSchedule } from "../../types/PostBillingsRequestSchedule";
import { PostBillingsRequestCollectionFactor } from "../../types/PostBillingsRequestCollectionFactor";
import { PostBillingsRequestCollectionIncludeCurrent } from "../../types/PostBillingsRequestCollectionIncludeCurrent";
import { PostBillingsRequestCurrency } from "../../types/PostBillingsRequestCurrency";
import { PostBillingsRequestInactive } from "../../types/PostBillingsRequestInactive";
import { PostBillingsRequestFrozen } from "../../types/PostBillingsRequestFrozen";

export const PostBillingsRequest: core.serialization.Schema<
    serializers.PostBillingsRequest.Raw,
    ButtonclikrApi.PostBillingsRequest
> = core.serialization.object({
    login: core.serialization.unknown(),
    entity: core.serialization.unknown(),
    forentity: core.serialization.unknown().optional(),
    org: core.serialization.unknown().optional(),
    division: core.serialization.unknown().optional(),
    partition: core.serialization.unknown().optional(),
    description: core.serialization.unknown().optional(),
    schedule: PostBillingsRequestSchedule,
    scheduleFactor: core.serialization.unknown(),
    start: core.serialization.unknown(),
    finish: core.serialization.unknown().optional(),
    collectionFactor: PostBillingsRequestCollectionFactor,
    collectionOffset: core.serialization.unknown(),
    collectionIncludeCurrent: PostBillingsRequestCollectionIncludeCurrent,
    currency: PostBillingsRequestCurrency,
    inactive: PostBillingsRequestInactive,
    frozen: PostBillingsRequestFrozen,
});

export declare namespace PostBillingsRequest {
    interface Raw {
        login?: unknown;
        entity?: unknown;
        forentity?: unknown | null;
        org?: unknown | null;
        division?: unknown | null;
        partition?: unknown | null;
        description?: unknown | null;
        schedule: PostBillingsRequestSchedule.Raw;
        scheduleFactor?: unknown;
        start?: unknown;
        finish?: unknown | null;
        collectionFactor: PostBillingsRequestCollectionFactor.Raw;
        collectionOffset?: unknown;
        collectionIncludeCurrent: PostBillingsRequestCollectionIncludeCurrent.Raw;
        currency: PostBillingsRequestCurrency.Raw;
        inactive: PostBillingsRequestInactive.Raw;
        frozen: PostBillingsRequestFrozen.Raw;
    }
}
