/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as ButtonclikrApi from "../../../../index";

/**
 * @example
 *     {
 *         entity: "p1_ent_5a1ef5e5565631155c95344",
 *         account: {
 *             method: 8,
 *             number: 123456789012345,
 *             routing: 63013924
 *         },
 *         primary: 1,
 *         type: ButtonclikrApi.AccountsAddBankAccountReqBodyType.All,
 *         status: 1,
 *         reserved: 1,
 *         currency: ButtonclikrApi.AccountsAddBankAccountReqBodyCurrency.Aed,
 *         inactive: 1,
 *         frozen: 1
 *     }
 */
export interface AccountsAddBankAccountReqBody {
    /** The alphanumeric identifier of the Entity associated with this Account. */
    entity: string;
    /** An object representing details of the Account, including the type of Account (method), Account number and routing code. */
    account: ButtonclikrApi.AccountsAddBankAccountReqBodyAccount;
    /** A client-supplied name for this bank account, which is stored as a text string and must be between 0 and 100 characters long. */
    name?: string;
    /** A client-supplied description for this bank account, which is stored as a text string and must be between 0 and 100 characters long. */
    description?: string;
    /**
     * Indicates whether the Account is the ''primary'' Account for the associated Entity. Only one Account associated with each Entity can be the ''primary'' Account. Valid Values: `0` - Not Primary, `1` - Primary.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **Active.**
     *
     * - `1` - **Inactive.**
     *
     * </details>
     *
     */
    primary: number;
    /**
     * The type of financial account, debit, credit or both.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     *   - `all` - **Debit/Checking + Credit**
     *
     *   - `credit` - **Credit-Only**
     *
     *   - `debit` - **Debit/Checking-Only**
     *
     * </details>
     *
     */
    type: ButtonclikrApi.AccountsAddBankAccountReqBodyType;
    /**
     * The status of the Account. Valid Values: `0` - Not Ready. Account holder is not ready to verify the account, `1` - Ready. Account is ready to be verified, `2` - Challenged. The account has processed the challenge, `3` - Verified. The account has been verified, `4` - Manual. Issue during verification, required manual verification.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **Not Ready.**
     *
     * - `1` - **Ready.**
     *
     * - `2` - **Challenged.**
     *
     * - `3` - **Verified.**
     *
     * - `4` - **Manual.**
     *
     * </details>
     *
     */
    status: number;
    /**
     * Indicates whether the Account is reserved and the action that will be taken as a result. Valid Values: `0` - No reserve, `1` - Account withheld, `3` - Account usage pending manual review, `4` - Move all funds from this Account into a reserve.
     *
     * <details>
     * <summary>Valid Values</summary>
     *
     * - `0` - **No reserve.**
     *
     * - `1` - **Ready.**
     *
     * - `3` - **Account withheld.**
     *
     * - `4` - **Account usage pending manual review.**
     *
     * - `4` - **Move all funds from this Account into a reserve.**
     *
     * </details>
     *
     */
    reserved: number;
    /** The last stage completed for risk assessment. Valid Values: `createAccount` - The final stage for review, add the account. */
    checkStage?: "createAccount";
    /** The currency of this Account, set automatically based on the settled total. The default is 'USD'. */
    currency: ButtonclikrApi.AccountsAddBankAccountReqBodyCurrency;
    /** The expiration date of the related debit account in MMYY format. Example: February, 2025 = '0225'. */
    expiration?: number;
    /** The account number mask, showing the last 4 digits of the account number. */
    mask?: string;
    inactive: ButtonclikrApi.Inactive;
    frozen: ButtonclikrApi.Frozen;
}
