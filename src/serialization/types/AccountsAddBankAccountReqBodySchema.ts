/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as ButtonclikrApi from "../../api/index";
import * as core from "../../core";
import { AccountsAddBankAccountReqBodySchemaAccount } from "./AccountsAddBankAccountReqBodySchemaAccount";
import { AccountsAddBankAccountReqBodySchemaType } from "./AccountsAddBankAccountReqBodySchemaType";
import { AccountsAddBankAccountReqBodySchemaCurrency } from "./AccountsAddBankAccountReqBodySchemaCurrency";
import { Inactive } from "./Inactive";
import { Frozen } from "./Frozen";

export const AccountsAddBankAccountReqBodySchema: core.serialization.ObjectSchema<
    serializers.AccountsAddBankAccountReqBodySchema.Raw,
    ButtonclikrApi.AccountsAddBankAccountReqBodySchema
> = core.serialization.object({
    entity: core.serialization.string(),
    account: AccountsAddBankAccountReqBodySchemaAccount,
    name: core.serialization.string().optional(),
    description: core.serialization.string().optional(),
    primary: core.serialization.number(),
    type: AccountsAddBankAccountReqBodySchemaType,
    status: core.serialization.number(),
    reserved: core.serialization.number(),
    checkStage: core.serialization.stringLiteral("createAccount").optional(),
    currency: AccountsAddBankAccountReqBodySchemaCurrency,
    expiration: core.serialization.number().optional(),
    mask: core.serialization.number().optional(),
    inactive: Inactive,
    frozen: Frozen,
});

export declare namespace AccountsAddBankAccountReqBodySchema {
    interface Raw {
        entity: string;
        account: AccountsAddBankAccountReqBodySchemaAccount.Raw;
        name?: string | null;
        description?: string | null;
        primary: number;
        type: AccountsAddBankAccountReqBodySchemaType.Raw;
        status: number;
        reserved: number;
        checkStage?: "createAccount" | null;
        currency: AccountsAddBankAccountReqBodySchemaCurrency.Raw;
        expiration?: number | null;
        mask?: number | null;
        inactive: Inactive.Raw;
        frozen: Frozen.Raw;
    }
}
