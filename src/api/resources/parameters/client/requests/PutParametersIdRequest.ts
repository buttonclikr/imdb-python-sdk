/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as ButtonclikrApi from "../../../../index";

/**
 * @example
 *     {
 *         division: {
 *             "key": "value"
 *         },
 *         login: {
 *             "key": "value"
 *         },
 *         org: {
 *             "key": "value"
 *         },
 *         partition: {
 *             "key": "value"
 *         },
 *         minTxnTotal: {
 *             "key": "value"
 *         },
 *         maxTxnTotal: {
 *             "key": "value"
 *         },
 *         maxTxnDailyTotal: {
 *             "key": "value"
 *         },
 *         maxTxnDailyNum: {
 *             "key": "value"
 *         },
 *         maxTxnMonthlyTotal: {
 *             "key": "value"
 *         },
 *         maxTxnMonthlyNum: {
 *             "key": "value"
 *         },
 *         minFundsPayoutTotal: {
 *             "key": "value"
 *         },
 *         minDebitedAvailableFunds: {
 *             "key": "value"
 *         },
 *         maxSubscriptionFailures: {
 *             "key": "value"
 *         },
 *         minPayoutCreditTotal: {
 *             "key": "value"
 *         },
 *         maxPayoutCreditTotal: {
 *             "key": "value"
 *         },
 *         minPayoutDebitTotal: {
 *             "key": "value"
 *         },
 *         maxPayoutDebitTotal: {
 *             "key": "value"
 *         },
 *         minAvailableFunds: {
 *             "key": "value"
 *         },
 *         minStatementDebitPayoutDelay: {
 *             "key": "value"
 *         },
 *         minPayoutDelay: {
 *             "key": "value"
 *         },
 *         minFirstPayoutDelay: {
 *             "key": "value"
 *         },
 *         payoutAdjustSubcents: ButtonclikrApi.PutParametersIdRequestPayoutAdjustSubcents.Zero,
 *         payoutDelayIncludeOffDays: ButtonclikrApi.PutParametersIdRequestPayoutDelayIncludeOffDays.Zero,
 *         payoutIncludePending: ButtonclikrApi.PutParametersIdRequestPayoutIncludePending.Zero,
 *         amexEnabled: ButtonclikrApi.PutParametersIdRequestAmexEnabled.Zero,
 *         optBlueEnabled: ButtonclikrApi.PutParametersIdRequestOptBlueEnabled.Zero,
 *         discoverEnabled: ButtonclikrApi.PutParametersIdRequestDiscoverEnabled.Zero,
 *         discoverAcquiredEnabled: ButtonclikrApi.PutParametersIdRequestDiscoverAcquiredEnabled.Zero,
 *         mc3DsEnabled: ButtonclikrApi.PutParametersIdRequestMc3DsEnabled.Zero,
 *         visa3DsEnabled: ButtonclikrApi.PutParametersIdRequestVisa3DsEnabled.Zero,
 *         amex3DsEnabled: ButtonclikrApi.PutParametersIdRequestAmex3DsEnabled.Zero,
 *         discover3DsEnabled: ButtonclikrApi.PutParametersIdRequestDiscover3DsEnabled.Zero,
 *         eCheckEnabled: ButtonclikrApi.PutParametersIdRequestECheckEnabled.Zero,
 *         fundingEnabled: ButtonclikrApi.PutParametersIdRequestFundingEnabled.Zero,
 *         vendorFeesEnabled: ButtonclikrApi.PutParametersIdRequestVendorFeesEnabled.Zero,
 *         vendorFeesExternal: ButtonclikrApi.PutParametersIdRequestVendorFeesExternal.Zero,
 *         verifyDisabled: ButtonclikrApi.PutParametersIdRequestVerifyDisabled.Zero,
 *         verifyForBoardingNotRequired: ButtonclikrApi.PutParametersIdRequestVerifyForBoardingNotRequired.Zero,
 *         verifyForPayoutNotRequired: ButtonclikrApi.PutParametersIdRequestVerifyForPayoutNotRequired.Zero,
 *         refundReleasesReserve: ButtonclikrApi.PutParametersIdRequestRefundReleasesReserve.Zero,
 *         visaMisuseSettlement: {
 *             "key": "value"
 *         },
 *         visaMisuseTravelAutoSettlement: {
 *             "key": "value"
 *         },
 *         visaMisuseCardPresentReversal: {
 *             "key": "value"
 *         },
 *         visaMisuseCardNotPresentReversal: {
 *             "key": "value"
 *         },
 *         mcMisuseSettlement: {
 *             "key": "value"
 *         },
 *         mcMisuseCardPresentReversal: {
 *             "key": "value"
 *         },
 *         mcMisuseCardNotPresentReversal: {
 *             "key": "value"
 *         },
 *         mcMisuseTravelAutoReversal: {
 *             "key": "value"
 *         },
 *         minEcheckCaptureDelay: {
 *             "key": "value"
 *         },
 *         minDebitProcessingDelay: {
 *             "key": "value"
 *         },
 *         boardingDisabled: ButtonclikrApi.PutParametersIdRequestBoardingDisabled.Zero,
 *         autoReboardDays: {
 *             "key": "value"
 *         },
 *         minBoardingOwnership: {
 *             "key": "value"
 *         },
 *         debtRepaymentEnabled: ButtonclikrApi.PutParametersIdRequestDebtRepaymentEnabled.Zero,
 *         boardingExemptionsDisabled: ButtonclikrApi.PutParametersIdRequestBoardingExemptionsDisabled.Zero,
 *         autoTaxExemptEnabled: ButtonclikrApi.PutParametersIdRequestAutoTaxExemptEnabled.Zero,
 *         surchargeEnabled: ButtonclikrApi.PutParametersIdRequestSurchargeEnabled.Zero,
 *         mcInstantPayoutsEnabled: ButtonclikrApi.PutParametersIdRequestMcInstantPayoutsEnabled.Zero,
 *         visaInstantPayoutsEnabled: ButtonclikrApi.PutParametersIdRequestVisaInstantPayoutsEnabled.Zero,
 *         mcInstantPayoutMin: {
 *             "key": "value"
 *         },
 *         mcInstantPayoutMax: {
 *             "key": "value"
 *         },
 *         visaInstantPayoutMin: {
 *             "key": "value"
 *         },
 *         visaInstantPayoutMax: {
 *             "key": "value"
 *         },
 *         sameDayPayoutsEnabled: ButtonclikrApi.PutParametersIdRequestSameDayPayoutsEnabled.Zero,
 *         sameDayPayoutsDailyMax: {
 *             "key": "value"
 *         },
 *         minSameDayPayoutCreditTotal: {
 *             "key": "value"
 *         },
 *         maxSameDayPayoutCreditTotal: {
 *             "key": "value"
 *         },
 *         minSameDayPayoutDebitTotal: {
 *             "key": "value"
 *         },
 *         maxSameDayPayoutDebitTotal: {
 *             "key": "value"
 *         },
 *         applePayEnabled: ButtonclikrApi.PutParametersIdRequestApplePayEnabled.Zero,
 *         googlePayEnabled: ButtonclikrApi.PutParametersIdRequestGooglePayEnabled.Zero,
 *         accountUpdaterEnabled: ButtonclikrApi.PutParametersIdRequestAccountUpdaterEnabled.Zero,
 *         updateAllTokensEnabled: ButtonclikrApi.PutParametersIdRequestUpdateAllTokensEnabled.Zero,
 *         accountUpdaterFrequency: {
 *             "key": "value"
 *         },
 *         getParametersEnabled: ButtonclikrApi.PutParametersIdRequestGetParametersEnabled.Zero,
 *         payoutCutoffTime: {
 *             "key": "value"
 *         },
 *         declineNotificationEmail: ButtonclikrApi.PutParametersIdRequestDeclineNotificationEmail.Zero,
 *         decisionMicroserviceEnabled: ButtonclikrApi.PutParametersIdRequestDecisionMicroserviceEnabled.Zero,
 *         holdMessagesDisabled: ButtonclikrApi.PutParametersIdRequestHoldMessagesDisabled.Zero,
 *         txnDecisionMicroserviceEnabled: ButtonclikrApi.PutParametersIdRequestTxnDecisionMicroserviceEnabled.Zero,
 *         omniTokenEnabled: ButtonclikrApi.PutParametersIdRequestOmniTokenEnabled.Zero,
 *         passTokenEnabled: ButtonclikrApi.PutParametersIdRequestPassTokenEnabled.Zero,
 *         debitGracePeriod: {
 *             "key": "value"
 *         },
 *         negativeBalanceLimit: {
 *             "key": "value"
 *         },
 *         negativeBalanceEmail: ButtonclikrApi.PutParametersIdRequestNegativeBalanceEmail.Zero,
 *         positiveBalanceEmail: ButtonclikrApi.PutParametersIdRequestPositiveBalanceEmail.Zero,
 *         loginAsEnabled: ButtonclikrApi.PutParametersIdRequestLoginAsEnabled.Zero,
 *         mfaEnabled: ButtonclikrApi.PutParametersIdRequestMfaEnabled.Zero,
 *         portalAccessEnabled: ButtonclikrApi.PutParametersIdRequestPortalAccessEnabled.Zero,
 *         bankAccountAddStopEmail: ButtonclikrApi.PutParametersIdRequestBankAccountAddStopEmail.Zero,
 *         bankAccountUpdateStopEmail: ButtonclikrApi.PutParametersIdRequestBankAccountUpdateStopEmail.Zero,
 *         inactive: ButtonclikrApi.PutParametersIdRequestInactive.Zero,
 *         frozen: ButtonclikrApi.PutParametersIdRequestFrozen.Zero
 *     }
 */
export interface PutParametersIdRequest {
    division?: unknown;
    login?: unknown;
    org?: unknown;
    partition?: unknown;
    minTxnTotal?: unknown;
    maxTxnTotal?: unknown;
    maxTxnDailyTotal?: unknown;
    maxTxnDailyNum?: unknown;
    maxTxnMonthlyTotal?: unknown;
    maxTxnMonthlyNum?: unknown;
    minFundsPayoutTotal?: unknown;
    minDebitedAvailableFunds?: unknown;
    maxSubscriptionFailures?: unknown;
    minPayoutCreditTotal?: unknown;
    maxPayoutCreditTotal?: unknown;
    minPayoutDebitTotal?: unknown;
    maxPayoutDebitTotal?: unknown;
    minAvailableFunds?: unknown;
    minStatementDebitPayoutDelay?: unknown;
    minPayoutDelay?: unknown;
    minFirstPayoutDelay?: unknown;
    payoutAdjustSubcents?: ButtonclikrApi.PutParametersIdRequestPayoutAdjustSubcents;
    payoutDelayIncludeOffDays?: ButtonclikrApi.PutParametersIdRequestPayoutDelayIncludeOffDays;
    payoutIncludePending?: ButtonclikrApi.PutParametersIdRequestPayoutIncludePending;
    /**
     * Whether American Express processing should be enabled.
     * The default setting is '0'.
     */
    amexEnabled?: ButtonclikrApi.PutParametersIdRequestAmexEnabled;
    /**
     * Whether American Express OptBlue should be enabled.
     * The default setting is '0'.
     */
    optBlueEnabled?: ButtonclikrApi.PutParametersIdRequestOptBlueEnabled;
    /**
     * Whether Discover processing should be enabled.
     * The default setting is '0'.
     */
    discoverEnabled?: ButtonclikrApi.PutParametersIdRequestDiscoverEnabled;
    discoverAcquiredEnabled?: ButtonclikrApi.PutParametersIdRequestDiscoverAcquiredEnabled;
    /**
     * Whether MasterCard 3DSecure processing should be enabled.
     * The default setting is '0'.
     */
    mc3DsEnabled?: ButtonclikrApi.PutParametersIdRequestMc3DsEnabled;
    /**
     * Whether Visa 3DSecure processing should be enabled.
     * The default setting is '0'.
     */
    visa3DsEnabled?: ButtonclikrApi.PutParametersIdRequestVisa3DsEnabled;
    /**
     * Whether Amex 3DSecure processing should be enabled.
     * The default setting is '0'.
     */
    amex3DsEnabled?: ButtonclikrApi.PutParametersIdRequestAmex3DsEnabled;
    /**
     * Whether Discover 3DSecure processing should be enabled.
     * The default setting is '0'.
     */
    discover3DsEnabled?: ButtonclikrApi.PutParametersIdRequestDiscover3DsEnabled;
    /**
     * Whether eCheck processing should be enabled.
     * The default setting is '0'.
     */
    eCheckEnabled?: ButtonclikrApi.PutParametersIdRequestECheckEnabled;
    /**
     * Whether Payouts should be enabled.
     * The default setting is '0'.
     */
    fundingEnabled?: ButtonclikrApi.PutParametersIdRequestFundingEnabled;
    /**
     * Whether third parties can charge fees.
     * The default setting is '0'.
     */
    vendorFeesEnabled?: ButtonclikrApi.PutParametersIdRequestVendorFeesEnabled;
    /**
     * Whether any third-party fees that are incurred are settled from an external account.
     * The default setting is '0'.
     */
    vendorFeesExternal?: ButtonclikrApi.PutParametersIdRequestVendorFeesExternal;
    /**
     * Whether bank account verification requirements should be disabled.
     * The default setting is '0'.
     */
    verifyDisabled?: ButtonclikrApi.PutParametersIdRequestVerifyDisabled;
    /**
     * Whether the requirement to verify a Merchant's bank account before boarding should be disabled.
     * The default setting is '0'.
     */
    verifyForBoardingNotRequired?: ButtonclikrApi.PutParametersIdRequestVerifyForBoardingNotRequired;
    /**
     * Whether the requirement to verify a Merchant's bank account before making a Payout should be disabled.
     * The default setting is '0'.
     */
    verifyForPayoutNotRequired?: ButtonclikrApi.PutParametersIdRequestVerifyForPayoutNotRequired;
    /** Whether a refund Transaction should cause any reserved funds in the related Transaction to be released. */
    refundReleasesReserve?: ButtonclikrApi.PutParametersIdRequestRefundReleasesReserve;
    visaMisuseSettlement?: unknown;
    visaMisuseTravelAutoSettlement?: unknown;
    visaMisuseCardPresentReversal?: unknown;
    visaMisuseCardNotPresentReversal?: unknown;
    mcMisuseSettlement?: unknown;
    mcMisuseCardPresentReversal?: unknown;
    mcMisuseCardNotPresentReversal?: unknown;
    mcMisuseTravelAutoReversal?: unknown;
    minEcheckCaptureDelay?: unknown;
    minDebitProcessingDelay?: unknown;
    /**
     * Whether boarding for an entity is enabled or disabled.
     * The default setting is 0.
     */
    boardingDisabled?: ButtonclikrApi.PutParametersIdRequestBoardingDisabled;
    autoReboardDays?: unknown;
    minBoardingOwnership?: unknown;
    /**
     * Whether debtRepayment for transactions is enabled.
     * The default setting is 0.
     */
    debtRepaymentEnabled?: ButtonclikrApi.PutParametersIdRequestDebtRepaymentEnabled;
    /**
     * Whether FinCen boarding exemptions should be disabled.
     * The default setting is '0'.
     */
    boardingExemptionsDisabled?: ButtonclikrApi.PutParametersIdRequestBoardingExemptionsDisabled;
    /**
     * Whether to assume a transaction is taxExempt if no tax is set for level II processing.
     * The default setting is 0.
     */
    autoTaxExemptEnabled?: ButtonclikrApi.PutParametersIdRequestAutoTaxExemptEnabled;
    /**
     * Whether it is allowed to use surcharge on transactions.
     * The default setting is '0'.
     */
    surchargeEnabled?: ButtonclikrApi.PutParametersIdRequestSurchargeEnabled;
    /**
     * Whether Master Card instant payouts should be enabled.
     * The default setting is 0.
     */
    mcInstantPayoutsEnabled?: ButtonclikrApi.PutParametersIdRequestMcInstantPayoutsEnabled;
    /**
     * Whether Visa Instant Payout should be enabled.
     * The default setting is 0.
     */
    visaInstantPayoutsEnabled?: ButtonclikrApi.PutParametersIdRequestVisaInstantPayoutsEnabled;
    mcInstantPayoutMin?: unknown;
    mcInstantPayoutMax?: unknown;
    visaInstantPayoutMin?: unknown;
    visaInstantPayoutMax?: unknown;
    sameDayPayoutsEnabled?: ButtonclikrApi.PutParametersIdRequestSameDayPayoutsEnabled;
    sameDayPayoutsDailyMax?: unknown;
    minSameDayPayoutCreditTotal?: unknown;
    maxSameDayPayoutCreditTotal?: unknown;
    minSameDayPayoutDebitTotal?: unknown;
    maxSameDayPayoutDebitTotal?: unknown;
    /**
     * Whether apple pay is enabled.
     * The default setting is 0.
     */
    applePayEnabled?: ButtonclikrApi.PutParametersIdRequestApplePayEnabled;
    /**
     * Whether google pay is enabled.
     * The default setting is 0.
     */
    googlePayEnabled?: ButtonclikrApi.PutParametersIdRequestGooglePayEnabled;
    /**
     * Whether payments will be checked for updates. Payments will be checked and updated if enabled.
     * The default setting is 0.
     */
    accountUpdaterEnabled?: ButtonclikrApi.PutParametersIdRequestAccountUpdaterEnabled;
    /**
     * Whether all tokenized payments will be checked for updates. Tokenized payments will be checked and updated if enabled.
     * The default setting is 0.
     */
    updateAllTokensEnabled?: ButtonclikrApi.PutParametersIdRequestUpdateAllTokensEnabled;
    accountUpdaterFrequency?: unknown;
    /**
     * Whether it is allowed to return the parameters of this entity.
     * The default setting is '0'.
     */
    getParametersEnabled?: ButtonclikrApi.PutParametersIdRequestGetParametersEnabled;
    payoutCutoffTime?: unknown;
    declineNotificationEmail?: ButtonclikrApi.PutParametersIdRequestDeclineNotificationEmail;
    decisionMicroserviceEnabled?: ButtonclikrApi.PutParametersIdRequestDecisionMicroserviceEnabled;
    holdMessagesDisabled?: ButtonclikrApi.PutParametersIdRequestHoldMessagesDisabled;
    txnDecisionMicroserviceEnabled?: ButtonclikrApi.PutParametersIdRequestTxnDecisionMicroserviceEnabled;
    /**
     * Whether it is allowed to use Omni Token .
     * The default setting is '0'.
     */
    omniTokenEnabled?: ButtonclikrApi.PutParametersIdRequestOmniTokenEnabled;
    /**
     * Whether it is allowed to use Pass Token .
     * The default setting is '0'.
     */
    passTokenEnabled?: ButtonclikrApi.PutParametersIdRequestPassTokenEnabled;
    debitGracePeriod?: unknown;
    negativeBalanceLimit?: unknown;
    /**
     * Controls whether an email is sent when an entity reaches a negative balance.
     * The default setting is 0.
     */
    negativeBalanceEmail?: ButtonclikrApi.PutParametersIdRequestNegativeBalanceEmail;
    /**
     * Will dictate whether an email is sent when an entity recovers from a negative balance.
     * The default setting is 0.
     */
    positiveBalanceEmail?: ButtonclikrApi.PutParametersIdRequestPositiveBalanceEmail;
    loginAsEnabled?: ButtonclikrApi.PutParametersIdRequestLoginAsEnabled;
    mfaEnabled?: ButtonclikrApi.PutParametersIdRequestMfaEnabled;
    portalAccessEnabled?: ButtonclikrApi.PutParametersIdRequestPortalAccessEnabled;
    bankAccountAddStopEmail?: ButtonclikrApi.PutParametersIdRequestBankAccountAddStopEmail;
    /** Email notification to the business email when an existing bank account record is updated. */
    bankAccountUpdateStopEmail?: ButtonclikrApi.PutParametersIdRequestBankAccountUpdateStopEmail;
    /** Whether this resource is marked as inactive. */
    inactive: ButtonclikrApi.PutParametersIdRequestInactive;
    /** Whether this resource is marked as frozen. */
    frozen: ButtonclikrApi.PutParametersIdRequestFrozen;
}
